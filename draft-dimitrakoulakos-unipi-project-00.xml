<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="no" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no"?>
<!-- Start each main section on a new page -->
<?rfc subcompact="no"?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-dimitrakoulakos-unipi-project-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->
  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title>Semester project for 2023</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

	<author fullname="Sotirios Dimitrakoulakos" initials="S.D." surname="Dimitrakoulakos">
			<organization>University of Piraeus</organization>
			<address>
				<postal>
					<street>Department of Digital Systems</street>
					<!-- Reorder these if your country does things differently -->
					<city>Piraeus</city>
					<region/>
					<code>18534</code>
					<country>Greece</country>
				</postal>
				<email>sdimitrakoulakos@gmail.com</email>
				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

    <date year="2023" />

    <area>Edu</area>

    <workgroup>Education</workgroup>

    <keyword>Edu</keyword>
    <keyword>Project</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>The purpose of this document is to provide information on the structure of the calculator protocol, the sequence of its messages and the message fields.</t>
    </abstract>
  </front>

  <middle>
  <section title="Introduction">
	<t>The purpose of this document is simple. To provide the IETF and other interested parties, a clear description on the funcionality, structure and usage of the designed protocol.</t>
  <t>This document follows the keyword use as specified in <xref target="RFC2119">RFC2119</xref>.</t>

	<t>The remainder of this document SHOULD be organized as follows. <xref target="Terminology"/> explains the terminology used in this document. <xref target="ProtoOverview"/> provides a high-level overview of the protocol. Finally, <xref target="Headers"/> provides the details of each protocol header.</t>
  <section title="Requirements Language">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119" format="default">RFC2119</xref>.</t>
  </section>
	</section>
	
	<section anchor="Terminology" title="Terminology">

	<t>This document uses the following terms:
	<list style="hanging">
    <t>Protocol - A pre-approved communication language between two end systems.</t>
    <t>Server - The part of the communication protocol that receives the request. In this project the server is an endpoint for a database.</t>
    <t>Client - The part of the communication protocol that starts the request. In this project the client is a student application that requests subscription to the student's database.</t>
    <t>byte - An 8-bit octet.</t>
    <t>padding - Bits or characters that fill up unused portions of a data structure, such as a field, packet or frame.</t>
    <t>string - A sequence of characters used to represent text.</t>
  </list></t>
  </section>

	<section anchor="ProtoOverview" title="Protocol Overview">
    <t><xref target="Exchange" /> provides a detailed high-level overview of the message exchange between the server and the client.</t>

    <figure title="Message Exchange" anchor="Exchange"> 
      <artwork align="center"><![CDATA[
Client                                                       Server

  |                       Request Message                       |
  |                                                             |
  | ----------------------------------------------------------> |
  |                                                             |
  |                                                             |
  |                                                             |
  |                                                             |
  |                                                             |
  |                                                             |
  |                       Response Message                      |
  |                                                             |
  | <---------------------------------------------------------  |
  |                                                             |
  |                                                             |
        ]]></artwork></figure>
    <t>The Client sends a packet to the Server with a Message Type, the Message Length, 4 values and a string code for a Math Operation. 
     The Server them uses only the needed values for the requested math operation, produces a result (number or error message) and finally composes 
     a packet with a Message Type, the Message Length and the Result of the operation, which he send back to the Client as a response.</t>
  </section>
	<section anchor="Headers" title="Protocol Header Format" >
    <t>The following headers are required in order to satisfy all the requirements</t>
    <t>Each header SHOULD be in a different subsection</t>
	
  <section title="Client header">
    <t>This is the first message sent by the Client to initiate the communication process... </t>
    <t>The following figure shows the message format.</t>
    <figure title="A Header Format" anchor="RSHF"> <artwork align="center"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-------------------------------+-------------------------------+
|                               |                               |
|                               |                               |
|            Type               |            Length             |
|                               |                               |
+-------------------------------+-------------------------------+
|                               |                               |
|                               |                               |
|           Value1              |            Value2             |
|                               |                               |
+-------------------------------+-------------------------------+
|                               |                               |
|                               |                               |
|           Value3              |            Value4             |
|                               |                               |
+-------------------------------+-------------------------------+
|                                                               |
|                                                               |
|                 Math Operation.....|Padding|                  |
|                                                               |
|                                                               |
+---------------------------------------------------------------+
      ]]></artwork></figure>
    <t>
      <list style="symbols">
        <t>Type - 16 bits unsigned integer: The message type. For this message, the message type MUST be 0.</t>
        <t>Length - 16 bits unsigned integer: The value for this field is the length of the message.</t>
        <t>Value1 - 16 bits unsigned integer: The value for this field is the first number for the math operation.</t>
        <t>Value2 - 16 bits unsigned integer: The value for this field is the second number for the math operation.</t>
        <t>Value3 - 16 bits unsigned integer: The value for this field is the third number for the math operation (if it is not needed, it defaults to 0).</t>
        <t>Value4 - 16 bits unsigned integer: The value for this field is the fourth number for the math operation (if it is not needed, it defaults to 0).</t>
        <t>Math Operation - 32 bits of a string with padding: The value for this field is a string of the symbol, of the desired math operation (with padding to fill up to 32 bits).</t>
      </list>
    </t>
    <t>The client will send to the server a packet with the type of the message (0 [request]), the length of the total message, 4 integer values and the code 
    (A, B, C, D, E) in a string (with the necessary padding), which represents the mathematical operation requested to be performed. In the event that less than
     4 Values are needed for the respective operation, then only the needed values will be used (e.g. in the subtraction operation, Value1, Value2), while the rest will be sent with 
     the default value 0, and will simply not be used by the server. The type and length are unsigned short integers (H), so they are assigned 2 bytes each and constitute the
      first level of the packet. Now Value1, Value2, Value3 and Value4 can all take values greater than 255 and definitely less than 65535 (0 to 60000 or 30000). 
      So we are talking about unsigned integers (all positive) and according to the formula: For n byte unsigned integers = 0 to (2n*8/ - 1). It is enough 
      for us to give 2 bytes to each Value and, because these are also unsigned short integers (H), as a result the next two levels are created as above. 
      Finally, the math operation field, is given the last level of  4 bytes, since it is a string with variable length and whatever is left over between the length of the string and the 32 bit cap, 
      is filled with the corresponding calculated padding.
    </t>
  </section>

  <section title="Server header">
    <t>This is the second message sent by the Server to finilize the communication process... </t>
    <t>The following figure shows the message format.</t>
    <figure title="A Header Format" anchor="RSHF2"> <artwork align="center"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-------------------------------+-------------------------------+
|                               |                               |
|                               |                               |
|            Type               |            Length             |
|                               |                               |
+-------------------------------+-------------------------------+
|                                                               |
|                                                               |
|                     Result.....|Padding|                      |
|                                                               |
+---------------------------------------------------------------+
      ]]></artwork></figure>
    <t>
      <list style="symbols">
        <t>Type - 16 bits unsigned integer: The message type. For this message, the message type MUST be 1.</t>
        <t>Length - 16 bits unsigned integer: The value for this field is the length of the message.</t>
        <t>Result - 32 bits of a string with padding: The value for this field is a string of the result, meaning either a number or a phrase for error (with padding to fill up to 32 bits).</t>
      </list>
    </t>
    <t>The server will send back to the client a packet with the type of the message (1 [response]), the length of the total message and a string with the 
    result of the operation requested by the client (number if successful, otherwise error message), which will be filled with the necessary padding.
     The type and length are unsigned short integers (H), so they are given 2 bytes each and constitute the first level of the packet. 
     Finally, for the result string, it is given the last level of 4 bytes, since it is a string with variable length and whatever is left over is filled with 
     the corresponding calculated padding.
    </t>
  </section>

  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">
    <t>The author would like to acknowledge all the hard work that has been put into this protocol's implementation.</t>
    <t>The author would also like to thank the IETF and all the academic personnel of Uni.Pi., for their time and patience.</t>
  </section>


    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo makes no requests to IANA.</t>
      <t>I could request to bind Internet Numbers, but I do not.</t>

    </section>
    <section anchor="Security" title="Security Considerations">
      <t>There is no security in this specification. This is a prototype and all messages should be sent in cleartext over the wire.</t>
      <t>This is a VERY unsecure protocol. Please do not implement.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Informative References">
      &RFC2119;
    </references>
  </back>
</rfc>
